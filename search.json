[{"title":"Linux命令","url":"/2023/10/22/Linux%E5%91%BD%E4%BB%A4/","content":"1.ls-l  文件详细信息-i  inode文件号-R  递归打印子目录下文件-d  不打印子目录下文件-h  以容易理解的方式打印文件大小-t  按修改时间排序输出-r  按相反顺序排序输出-a  所有文件-A  同-a，但不包括.和..-F  目录文件名后加/，可执行文件后加*\n2.cdcd - 返回上一个目录\n3.mkdir-v  创建时显示详细信息-p  递归创建目录mkdir -m 777 test   创建时设置目录权限\n4.cat-n  行号-b  省略空行cat &gt; log.txt &lt;&lt; EOF   使用heredoc来创建文件\n5.more-n  总行数+n  从第n行开始显示\n6.head-n  前n行-c  前c个字节\n7.tail-n  后n行 \n8.whichwhich 待搜索可执行文件名\n9.findfind 搜索路径 搜索条件-name 名称，可用正则表达式-perm 权限-type 类型-exec 对搜索结果的后续处理，结果用&#123;&#125;占位，如find . -type f -exec ls -l &#123;&#125; \\;与xargs结合使用，如find . -type f | xargs -I &#123;&#125; ls -l &#123;&#125; -maxdepth n 查询最大层数为n\n10.dfdf -h 磁盘使用情况\n11.du-c  查询结果总和-h  更可读\n","categories":["Linux"],"tags":["Linux命令"]},{"title":"MySQL表设计","url":"/2023/10/22/MySQL%E8%A1%A8%E8%AE%BE%E8%AE%A1/","content":"1. 范式与反范式1.1 数据库三范式\n1NF：原子性，列不可分2NF：满足1NF，同时列属性完全依赖于主键，不能部分依赖于主键3NF：满足2NF，同时列属性不传递依赖于非主属性，只能直接依赖于主键\n\n举例：设计符合2NF表\n\n原始表中订单编号和商品编号为联合主键，商品名称、单位、价格等信息不于主键相关，只与商品编号相关，违反了2NF,因此将原表拆分成3张表\n\n范式优点\n避免数据冗余，减少维护数据完整性的麻烦减少数据库空间数据变更速度快\n\n范式缺点\n按照范式的规范设计的表，等级越高的范式设计出来的表数量越多获取数据时，表关联过多，性能较差\n\n1.2 反范式\n针对业务场景，为减少多表关联，提高业务响应时间，允许适当的数据冗余。\n\n反范式优点\n允许适当的数据冗余，业务场景中需要的数据几乎都可以在一张表上显示，避免关联可以设计有效的索引\n\n2. 使用基本原则\n\n只用于数据存储，不进行复杂数据运算，不承载业务逻辑，确保存储和计算分离\n查询数据时尽量使用单表查询，减少跨库查询和多表关联\n杜绝大事务、大字段等性能杀手 · 大事务：运行步骤较多，涉及表和字段较多，容易造成资源争抢甚至形成死锁。事务回滚时会导致资源占用时间过长 · 大字段：blob、text等大字段尽量少使用或选择与主业务表分离，减少对该类字段的检索和更新\n\n\n3. 基本设置规则\n默认指定存储引擎为InnoDB默认字符集为UTF8mb4，支持emoji等特殊字符\n\n","categories":["MySQL"],"tags":["MySQL"]},{"title":"IO多路复用","url":"/2023/10/20/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/","content":"select执行原理\n\n将当前进程的所有文件描述符（使用bitmap存储），一次性的从用户态拷贝到内核态\n在内核中快速地无差别遍历每个fd，判断是否有数据到达\n将所有fd状态，从内核态拷贝到内核态，并返回已就绪的fd个数\n在用户态遍历判断具体哪个fd已就绪，然后进行相应的事件处理\n\n\n存在的不足\n\n文件描述符为bitmap，有长度限制（1024）\nfdset无法做到重用，每次循环必须重新创建\n频繁的用户态和内核态拷贝，性能开销大\n需要对文件描述符进行遍历，时间复杂度O(n)\n\n\npollpoll结构体struct pollfd &#123;    int fd;         //文件描述符    short events;   //注册事件    short revents;  //实际发生事件，由内核填充&#125;\n执行原理\n\n将当前进程的所有文件描述符，一次性从用户态拷贝到内核态\n在内核中快速地无差别遍历每个fd，判断是否有数据到达\n将所有fd状态，从内核态拷贝到用户态，并返回已就绪fd个数\n在用户态遍历具体哪个fd已就绪，进行对应事件处理\n\n\n存在的不足\n\npoll模型采用pollfd结构数组，解决了select的1024个文件描述符限制\n依然存在频繁的用户态和内核态间的拷贝，性能开销大\n时间复杂度为O(n)\n\n\n","categories":["操作系统"],"tags":["IO多路复用"]},{"title":"markdown","url":"/2023/10/20/markdown/","content":"hexo new page 新文件夹hexo new post 新文件\n1.粗体**粗体**\n2.斜体*斜体*\n3.块引用&gt; 段落块一&gt; 段落块二&gt; 段落块三\n4.有序列表1. 列表项一2. 列表向二    1. 子列表项一    2. 子列表向二\n5.无序列表- 列表项一- 列表项二    - 子列表项一    - 子列表项二\n6.代码块```code```\n7.图片![测试图片加载失败描述](/2023/10/20/markdown/test.png &quot;测试图片&quot;)\n8.分隔线***\n9.链接这是一个链接 [链接名称](链接url)\n10.转义字符\\需转义字符","categories":["markdown"],"tags":["markdown"]}]